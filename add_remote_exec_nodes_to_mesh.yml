---
- name: Add Remote Execution Nodes to Automation Mesh
  hosts: bootstrap-node

  vars:
    controller_validate_certs: false
    work_dir: "/tmp"

  vars_files:
    - vars/config-as-code/common.yml
    - vars/config-as-code/controller/instances.yml

  tasks:
    - name: Get Remote Exec Instances
      ansible.builtin.set_fact:
        remote_instances: "{{ controller_instances | map(attribute='hostname') | list }}"

    - name: Prerequisites Warning
      ansible.builtin.debug:
        msg:
          - "Warning the remote execution nodes require the following. Please make sure they are configured:"
          - "ansible-automation-platform-2.4-for-rhel-8-x86_64-rpms enabled for the receptor packages"
          - "Access to Galaxy or Automation Hub to download the receptor ansible collection"
          - "Ansible User setup"
          - "Ansible User Authentication. (user or sshkey). templates/install_bundle_inventory.yml.j2 might require editing if ssh key is used."
          - "host key verification via the bootstrap node. hostkey verification check is disabled at this point!"

    - name: Install Prerequisites
      become: true
      ansible.builtin.dnf:
        name: 
          - ansible-core
        state: latest

    - name: Create Work Dir
      ansible.builtin.file:
        path: "{{ work_dir }}"
        state: directory

    - name: Download install bundle from Controller
      ansible.builtin.get_url:
        url: "{{ controller_hostname }}/api/v2/instances/{{ item }}/install_bundle/"
        dest: "{{ work_dir }}/{{ item }}.tar.gz"
        force_basic_auth: yes
        username: "{{ controller_username }}"
        password: "{{ controller_password }}"
        validate_certs: false
      loop: "{{ remote_instances }}"

    - name: Create temporary install_bundle work directory
      ansible.builtin.file:
        path: "{{ work_dir }}/install_bundle_work"
        state: directory

    - name: Untar install_bundle archive
      ansible.builtin.unarchive:
        src: "{{ work_dir }}/{{ item }}.tar.gz"
        dest: "{{ work_dir }}/install_bundle_work/"
        remote_src: true
      loop: "{{ remote_instances }}"

    - name: Render install bundle inventory
      vars:
        remote_exec_instance: "{{ item }}"
      ansible.builtin.template:
        src: templates/install_bundle_inventory.yml.j2
        dest: "{{ work_dir }}/install_bundle_work/{{ item }}_install_bundle/inventory.yml"
      loop: "{{ remote_instances }}"

    - name: Render install bundle script
      vars:
        first_node_install_bundle_dir: "{{ work_dir }}/install_bundle_work/{{ remote_instances[0] }}_install_bundle"
        remote_execution_instances_flat_list: "{{ controller_instances | map(attribute='hostname') | join(' ') }}" 
      ansible.builtin.template:
        src: templates/install_bundle.sh.j2
        dest: "{{ work_dir }}/install_bundle_work/install_bundle.sh"
        mode: "0700"

    - name: Run install bundle script
      ansible.builtin.shell: "{{ work_dir }}/install_bundle_work/install_bundle.sh"
      args:
        chdir: "{{ work_dir }}/install_bundle_work/"

    # Run Execution Node Healthcheck

    - name: Run a health check on  Remote Execution Node
      ansible.builtin.uri:
        url: "{{ controller_hostname }}/api/v2/instances/{{ item }}/health_check/"
        user: "{{ controller_username }}"
        password: "{{ controller_password }}"
        validate_certs: false
        method: POST
        force_basic_auth: true
        status_code: 200
        body_format: json
      loop: "{{ remote_instances }}"
      loop_control:
        label: "{{ item }}"
      register: reg_health_check_init

    - name: Get Health Check results
      ansible.builtin.uri:
        url: "{{ controller_hostname }}/api/v2/instances/{{ item }}/health_check/"
        user: "{{ controller_username }}"
        password: "{{ controller_password }}"
        validate_certs: false
        method: GET
        force_basic_auth: true
        status_code: 200
        body_format: json
      loop: "{{ remote_instances }}"
      loop_control:
        label: "{{ item }}"
      register: reg_health_check
      ignore_errors: true
      until: reg_health_check.json.errors == ""
      retries: 3
      delay: 2

    - name: Validate Health Check Results
      ansible.builtin.debug:
        msg:
          - "Last Health Check: {{ item.json.last_health_check }}" 
          - "Errors: {{ (item.json.errors == '') | ternary('None', item.json.errors) }}"
      failed_when:
        - item.json.errors != ''
      loop: "{{ reg_health_check.results }}"
      loop_control:
        label: "{{ item.json.hostname }}"

